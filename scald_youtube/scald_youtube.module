<?php
/**
 * @file
 *   Defines a DailyMotion provider for Scald.
 */
define('YOUTUBE_OEMBED',    'http://www.youtube.com/oembed');
define('YOUTUBE_WEB',       'http://www.youtube.com/watch');
define('YOUTUBE_ID_REGEXP', '/^[a-zA-Z0-9\-_]+$/');

/**
 * Implements hook_scald_atom_providers.
 * Tell Scald that we'll be providing some video atoms.
 */
function scald_youtube_scald_atom_providers() {
  return array(
    'video' => 'Video hosted on YouTube'
  );
}

/**
 * Implements hook_scald_add_form.
 */
function scald_youtube_scald_add_form(&$form, &$form_state) {
  $form['identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Video identifier'),
    '#element_validate' => array('scald_youtube_validate_id'),
    '#default_value' => '',
  ); 
}

/**
   * Implements hook_scald_add_form_fill.
 */
function scald_youtube_scald_add_form_fill(&$atom, $form, $form_state) {

  // Get the identifier
  $identifier = scald_youtube_parse_id($form_state['values']['identifier'], TRUE);

  // Get video info
  $infos = scald_youtube_video($identifier);
  
  $atom->base_id = $identifier;
  $atom->title = $infos->title;
  
  // Prefill the author
  $atom->scald_authors[LANGUAGE_NONE][0] = array(
    'tid' => 0,
    'taxonomy_term' => (object)(array('name' => $infos->author))
  );

  // Save video width and height
  if(!isset($atom->data)) {
    $atom->data = array();
  }
  $atom->data['video_width'] = $infos->width;
  $atom->data['video_height'] = $infos->height;

  // Download a copy of the video thumbnail. This makes it possible
  // to do interesting manipulation with image styles presets.
  $thumb = drupal_http_request($infos->thumbnail['src']);
  $dir = 'public://youtube';
  if ($thumb->code == 200 && file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    $dest = $dir . '/' . $infos->id . '.jpg';
    $file = file_save_data($thumb->data, $dest);
  }

  // Set the file status to temporary
  $query = db_update('file_managed')
    ->condition('fid', $file->fid)
    ->fields(array('status' => 0))
    ->execute();  
  
  $atom->scald_thumbnail[LANGUAGE_NONE][0] = (array)$file;
}

/**
 * Implements hook_scald_fetch.
 */
function scald_youtube_scald_fetch($atom, $type) {
  $file = 'public://youtube/'. $atom->base_id .'.jpg';
  if (file_exists($file)) {
    $atom->file_source = $atom->thumbnail_source = $file;
  }
}

/**
 * Implements hook_scald_prerender.
 */
function scald_youtube_scald_prerender($atom, $context, $options, $mode) {
  if ($mode == 'atom') {
    if ($context != 'sdl_library_item') {
      $atom->rendered->player = theme('scald_youtube_player', 
        array('vars' => 
          array(
            'video_id'      => $atom->base_id,
            'video_width'   => ($atom->data['video_width'] ? $atom->data['video_width'] : 480),
            'video_height'  => ($atom->data['video_height'] ? $atom->data['video_height'] : 365),
            'thumbnail'     => $atom->thumbnail_source
          )
        )
      );
    }
  }
}

/**
 * Implements hook_theme.
 */
function scald_youtube_theme() {
  return array(
    'scald_youtube_player' => array(
      'variables' => array('vars' => NULL),
      'template' => 'scald_youtube_player'
    ),
  );
}


/**
 * Creates an atom based on a YouTube video id or an object
 * containing the video informations..
 * @param $video
 *   Unique identifier of the video on YouTube, or object
 *   returned by scald_youtube_video.
 * @return integer
 *   Unique identifier of the new atom
 */
function scald_youtube_register($video) {
  global $user;
  // Fetch the needed informations from YouTube
  if (is_object($video)) {
    $infos = $video;
  }
  else {
    $infos = scald_youtube_video($video);
  }
  
  // Check if the video has already been imported to prevent duplicate
  $old = scald_youtube_already_imported($infos->id);
  if ($old) {
    return FALSE;
  }

  // Download a copy of the video thumbnail. This makes it possible
  // to do interesting manipulation with image styles presets.
  $thumb = drupal_http_request($infos->thumbnail['src']);
  $dir = 'public://youtube';
  if ($thumb->code == 200 && file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    $dest = $dir . '/' . $infos->id . '.jpg';
    $file = file_save_data($thumb->data, $dest);
  }

  // @@@TODO: Import author into taxonomy vocabulary and link it
  
  // Create an atom
  $atom = new stdClass();
  $atom->type       = 'video';
  $atom->provider   = 'scald_youtube';
  $atom->base_id    = $infos->id;
  $atom->publisher  = $user->uid;
  $atom->title      = $infos->title;
  
  // And save it
  $atom_sid = scald_atom_save($atom);
  // Finally, return this id
  return $atom_sid; 
}


/**
 * Analyze OEmbed response for a given video ID
 */
function scald_youtube_video($id) {
  $info = new stdClass();

  // Build the full OEmbed URL
  $url = YOUTUBE_OEMBED . '?url='. YOUTUBE_WEB . '?v=' . $id;

  $response = drupal_http_request($url);
  if ($response->code >= 200 && $response->code < 400 && !empty($response->data)) {
    $data = json_decode($response->data);

    // ID
    $info->id = $id;

    // Title
    $info->title = $data->title;

    // Author
    $info->author = $data->author_name;
    
    // Video dimensions
    $info->width = $data->width;
    $info->height = $data->height;

    // Thumbnail
    if($data->thumbnail_url) {
      $info->thumbnail = array(
        'src'    => $data->thumbnail_url,
        'width'  => $data->thumbnail_width,
        'height' => $data->thumbnail_height,
      );
    }
  }

  return $info;
}


/**
 * Checks if a video has already been imported, based on its video
 * id.
 * @param $id
 *   The video identifier
 * @return mixed
 *   FALSE if the video was never imported, the scald identifier of
 *   the video otherwise.
 */
function scald_youtube_already_imported($id) {
  $query = array('provider' => 'scald_youtube', 'base_id' => $id);
  return scald_search($query, FALSE, TRUE);
}

/**
 * Form element validation handler for YouTube identifier
 *
 */
function scald_youtube_validate_id($element, &$form_state) {
  $id = scald_youtube_parse_id($form_state['values']['identifier'], TRUE);
  if(!$id) {
    form_error($element, t('Invalid Youtube video identifier.'));
  }
  else if(scald_youtube_already_imported($id)) {
    form_error($element, t('Youtube video already imported.'));
  }
}

/**
 * Parse an YouTube ID and check validity
 *
 */
function scald_youtube_parse_id($string, $check) {
  $id = NULL;
  $string = trim($string);
  if (!preg_match(YOUTUBE_ID_REGEXP, $string)) {
    // The string ID is not easy to parse, let's try to analyze it
    if (preg_match('#^'. YOUTUBE_WEB .'([a-zA-Z0-9]+)(_.*)?$#', $string, $m)) {
      // This string is a full YouTube URL
      $id = $m[1];
    }
    else if(preg_match("/^http/", $string)) {
      // This string is a URL, most likely a shortened one. (http://dai.ly, http://bit.ly, etc...)
      $response = drupal_http_request($string);
      if($response->code == 200 && isset($response->redirect_code) &&  ($response->redirect_code == 301 || $response->redirect_code == 302)) {
        return scald_youtube_parse_id($response->redirect_url, $check);
      }
    }
  }
  else {
    $id = $string;
  }

  if($id && $check) {
    // Last check to confirm this video really exists on YouTube
    if(!scald_youtube_video($id)) {
      $id = FALSE;
    }
  }
  return $id;
}