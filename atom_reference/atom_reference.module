<?php
/**
 * @file
 *   Defines a new field type, allowing to directly reference Scald Atoms from
 *   a node.
 */

/**
 * Implements hook_field_info().
 */
function atom_reference_field_info() {
  return array(
    'atom_reference' => array(
      'label' => t('Atom Reference'),
      'description' => 'This field stores the ID of a related atom as an integer value',
      'instance_settings' => array(
        'referencable_types' => array()
      ),
      'default_widget' => 'textfield',
      'default_formatter' => 'title',
    )
  );
}

/**
 * Implements hook_field_instance_settings_form().
 */
function atom_reference_field_instance_settings_form($field, $instance) {
  $options = array();
  foreach(scald_types() as $name => $type) {
    $options[$name] = $type->title;
  }
  $form = array();
  $form['referencable_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Atom types that can be referenced'),
    '#multiple' => TRUE,
    '#options' => $options,
    '#default_value' => $instance['settings']['referencable_types']
  );
  return $form;
}

/**
 * Implements hook_field_schema().
 */
function atom_reference_field_schema($field) {
  return array(
    'columns' => array(
      'sid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE
      )
    ),
    'indexes' => array(
      'sid' => array('sid')
    )
  );
}

/**
 * Implements hook_field_views_data().
 */
function atom_reference_field_views_data($field) {
  $data = field_views_field_default_views_data($field);
  $current_table = _field_sql_storage_tablename($field);
  $column = _field_sql_storage_columnname($field['field_name'], 'sid');

  // Relationship: add a relationship for related atom.
  $data[$current_table][$column]['relationship'] = array(
    'base' => 'scald_atoms',
    'field' => $column,
    'handler' => 'views_handler_relationship',
    'label' => t($field['widget']['label']),
    'field_name' => $field['field_name'],
  );

  return $data;
}

/**
 * Implements hook_field_validate().
 */
function atom_reference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Ensure that the types of the referenced atoms match the one of those
  // that were defined in the field configuration.
  $types = $instance['settings']['referencable_types'];
  foreach ($items as $delta => $item) {
    if (empty($item['sid'])) {
      continue;
    }
    $atom = scald_fetch($item['sid']);
    if (!isset($types[$atom->type]) || empty($types[$atom->type])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'atom_reference_bad_type',
        'message' => t("Atom %title is of type %type, which can't be referenced in field %field", array('%title' => $atom->title, '%type' => $atom->type, '%field' => $instance['label']))
      );
    }
  }
}

/**
 * Implements hook_field().
 */
function atom_reference_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'sanitize':
      // Get some safe values about the references atoms, checking that
      // they still exist and are fetchable.
      $sids = array();
      foreach ($items as $delta => $item) {
        if (is_array($item)) {
          $items[$delta]['safe'] = array();
          if (isset($item['sid'])) {
            $atom = scald_fetch($item['sid']);
            if (is_object($atom)) {
              $items[$delta]['safe']['sid'] = $atom->sid;
              $items[$delta]['safe']['title'] = check_plain($atom->title);
            }
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_field_is_empty().
 */
function atom_reference_field_is_empty($item, $field) {
  return empty($item['sid']);
}

/**
 * Implements hook_field_formatter_info().
 */
function atom_reference_field_formatter_info() {
  return array(
    'title' => array(
      'label' => 'Title',
      'field types' => array('atom_reference'),
    ),
    'library' => array(
      'label' => 'Library',
      'field types' => array('atom_reference'),
    ),
    'editor' => array(
      'label' => 'Editor',
      'field types' => array('atom_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view.
 */
function atom_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    $sid = $item['sid'];
    switch ($display['type']) {
      case 'title':
        $element[$delta] = array('#markup' => scald_render($sid, 'title'));
        break;

      case 'library':
        $element[$delta] = array('#markup' => scald_render($sid, 'sdl_library_item'));
        break;

      case 'editor':
        $element[$delta] = array('#markup' => scald_render($sid, 'editor'));
        break;
    }
  }

  return $element;
}

/**
 * Implements hook_field_widget_info.
 */
function atom_reference_field_widget_info() {
  return array(
    'atom_reference_textfield' => array(
      'label' => t('Drop box'),
      'field types' => array('atom_reference'),
    )
  );
}

/**
 * Implements hook_field_widget_form.
 */
function atom_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  dnd_add_library();

  drupal_add_js(drupal_get_path('module', 'atom_reference') . '/atom_reference.js');
  drupal_add_css(drupal_get_path('module', 'atom_reference') . '/atom_reference.css');

  // Get the default value, and format the placeholder accordingly.
  $default = isset($items[$delta]) ? $items[$delta] : '';
  if ($default) {
    $prefix = '<div class="atom_reference_drop_zone">' . scald_render($default, 'sdl_editor_representation') .'</div>';
  }
  else {
    $placeholder = t('Drop a resource here');
    $prefix = '<div class="atom_reference_drop_zone"><em>' . $placeholder . '</em></div>';
  }

  $types = $instance['settings']['referencable_types'];
  $all = scald_types();
  $options = array();
  foreach ($types as $name => $value) {
    if ($value && isset($all[$name])) {
      $options[$name] = $all[$name]->title;
    }
  }

  $help = format_plural(
    count($options),
    'Allowed resource format: %types',
    'Allowed resource formats: %types',
    array('%types' => implode(', ', $options))
  );

  $element['sid'] = $element;
  $element['sid']['#description'] .= $help;

  $element['sid']['#type'] = 'textfield';
  $element['sid']['#field_prefix'] = $prefix;
  $element['sid']['#attributes'] = array('data-types' => implode(',', array_keys($options)));
  $element['sid']['#default_value'] = $default;
  return $element;
}

/**
 * Implements hook_field_widget_error.
 */
function atom_reference_field_widget_error($element, $error, $form, &$form_state) {
  $name = implode('][', $element['sid']['#array_parents']);
  form_set_error($name, $error['message']);
}
