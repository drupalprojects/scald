<?php
/**
 * @file
 *   Defines a twitter provider for Scald.
 *
 */

define('TWITTER_ID_REGEXP',        '/^[a-zA-Z0-9]+$/');
define('TWITTER_WEB_REGEXP',       '#^https?://([-\w]+\.)?twitter\.com/.*/(status|statuses)/(\d+)#');
define('TWITTER_WEB',              'http://twitter.com');

/**
 * Implements hook_scald_atom_providers().
 * Tell Scald that we'll be providing some twitter atoms.
 */
function scald_twitter_scald_atom_providers() {
  return array(
    'twitter' => 'Tweets hosted on twitter'
  );
}

/**
 * Implements hook_scald_add_form().
 */
function scald_twitter_scald_add_form(&$form, &$form_state) {
  $form['identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('twitter identifier or URL'),
    '#element_validate' => array('scald_twitter_validate_id'),
    '#default_value' => '',
  );
}

/**
 * Implements hook_scald_add_form_fill().
 */
function scald_twitter_scald_add_form_fill(&$atom, $form, $form_state) {

  // Get the identifier
  $identifier = scald_twitter_parse_id($form_state['values']['identifier'], TRUE);

  // Get tweet info
  $infos = scald_twitter_text($identifier);

  $atom->base_id = $identifier;
  $atom->title = $infos->title;

  // Prefill the author
  $atom->scald_authors[LANGUAGE_NONE][0] = array(
    'tid' => 0,
    'taxonomy_term' => (object)(array('name' => $infos->author))
  );

  // Prefill tags
  if (isset($infos->tags)) {
    $i = 0;
    $tag_array = explode(" ", $infos->tags);
    foreach ($tag_array as $tag) {
      $atom->scald_tags[LANGUAGE_NONE][$i] = array(
        'tid' => $i,  // Beware, this is not a real tid, it's just an index
        'taxonomy_term' => (object)(array('name' => $tag))
      );
      $i++;
    }
  }

  // Download a copy of the tweet thumbnail. This makes it possible
  // to do interesting manipulation with image styles presets.
  $thumb = drupal_http_request($infos->thumbnail['src']);
  $dir = 'public://twitter';
  if ($thumb->code == 200 && file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    $dest = $dir . '/' . $infos->id . '.jpg';
    $file = file_save_data($thumb->data, $dest);

    if ($file) {
      // Set the file status to temporary
      $query = db_update('file_managed')
        ->condition('fid', $file->fid)
        ->fields(array('status' => 0))
        ->execute();

      $atom->scald_thumbnail[LANGUAGE_NONE][0] = (array)$file;
    }
  }
}

/**
 * Implements hook_scald_fetch().
 */
function scald_twitter_scald_fetch($atom, $type) {
  $file = $atom->scald_thumbnail[LANGUAGE_NONE][0]['uri'];
  if (file_exists($file)) {
    $atom->file_source = $atom->thumbnail_source = $file;
  }
  $atom->omit_legend = TRUE;
}


/**
 * Implements hook_scald_prerender().
 */
function scald_twitter_scald_prerender($atom, $context, $options, $mode) {
  if ($mode == 'atom') {
    if ($context != 'sdl_library_item') {
      try {
        $tweet_embed = json_decode( file_get_contents( "http://api.twitter.com/1/statuses/oembed.json?omit_script=1&id=" . $atom->base_id));
      }
      catch (Exception $e) {
        watchdog('scald_twitter', $e->getMessage());
        return FALSE;
      }
      $atom->rendered->player = $tweet_embed->html;
      $atom->rendered->title = '';
    }
  }
}

/**
 * Creates an atom based on a twitter text id or an object
 * containing the text informations..
 * @param $text
 *   Unique identifier of the text tweet on twitter, or object
 *   returned by scald_twitter_text
 * @return integer
 *   Unique identifier of the new atom
 */
function scald_twitter_register($tweet) {
  // Fetch the needed informations from Tweeter
  if (is_object($tweet)) {
    $infos = $tweet;
  }
  else {
    $infos = scald_twitter_text($tweet);
  }

  // Check if the tweet has already been imported to prevent duplicate
  $old = scald_twitter_already_imported($infos->id);
  if ($old) {
    return FALSE;
  }

  // Download a copy of the twitter thumbnail. This makes it possible
  // to do interesting manipulation with image styles presets.
  $thumb = drupal_http_request($infos->thumbnail['src']);
  $dir = 'public://twitter';
  if ($thumb->code == 200 && file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    $dest = $dir . '/' . $infos->id . '.jpg';
    $file = file_save_data($thumb->data, $dest);
  }

  // Create an atom
  $atom = new ScaldAtom('twitter', 'scald_twitter', array(
    'base_id' => $infos->id,
    'title' => $infos->title,
  ));

  // And save it
  $atom_sid = scald_atom_save($atom);
  // Finally, return this id
  return $atom_sid;
}

/**
 * Get all necessary on an given text tweet using twitter API
 * @param $id
 *   Unique identifier of the text tweet on twitter
 * @return object
 *   Object containing all necessary info.
 */
function scald_twitter_text($id) {

  try {
    $tweet = json_decode( file_get_contents( "http://api.twitter.com/1/statuses/show.json?id=" . $id));
  }
  catch (Exception $e) {
    watchdog('scald_twitter', $e->getMessage());
    return FALSE;
  }

  $info = new stdClass();
  // ID
  $info->id = $id;
  // Title
  $info->title = drupal_substr($tweet->text, 0, 127);
  // Author
  $info->author = $tweet->user->name;
  $info->screen_name = $tweet->user->screen_name;
  // Thumbnail
  if ($tweet->user->profile_image_url) {
    // Artwork is always 100x100
    $info->thumbnail = array(
      'src'    => $tweet->user->profile_image_url,
      'width'  => 50,
      'height' => 50,
    );
  }

  // Tags
  // we take every word starting by #
  $pattern = '/(?!\b)(#\w+\b)/';
  $matches = NULL;
  preg_match($pattern, $tweet->text, $matches);
  if (is_array($matches) && count($matches) > 0) {
    $matches = array_unique($matches);
    $info->tags = implode(" ", $matches);
    $info->tags = str_replace('#', '', $info->tags);
  }
  // License
  $info->license = 'SC';
  return $info;
}

/**
 * Checks if an tweet has already been imported, based on its tweet id.
 * @param $id
 *   The tweet identifier
 * @return mixed
 *   FALSE if the tweet was never imported, the scald identifier of
 *   the tweet otherwise.
 */
function scald_twitter_already_imported($id) {
  $query = array('provider' => 'scald_twitter', 'base_id' => $id);
  return scald_search($query, FALSE, TRUE);
}

/**
 * Form element validation handler for twitter identifier
 *
 */
function scald_twitter_validate_id($element, &$form_state) {
  $id = scald_twitter_parse_id($form_state['values']['identifier'], TRUE);
  if (!$id) {
    form_error($element, t('Invalid twitter ID or URL.'));
  }
  elseif (scald_twitter_already_imported($id)) {
    form_error($element, t('twitter tweet already imported.'));
  }
}

/**
 * Parse a Tweet ID and check validity
 *
 */
function scald_twitter_parse_id($string, $check) {
  $id = FALSE;
  $string = trim($string);

  if (!preg_match(TWITTER_ID_REGEXP, $string)) {
    // The string ID is not easy to parse, let's try to analyze it
    if (preg_match(TWITTER_WEB_REGEXP, $string, $m)) {
      // This string is a full twitter URL
      $id = scald_twitter_resolve_url($string);
    }
    elseif (preg_match("/^http/", $string)) {
      // This string is a URL, most likely a shortened one. (http://dai.ly, http://bit.ly, etc...)
      $response = drupal_http_request($string);
      if ($response->code == 200 && isset($response->redirect_code) && ($response->redirect_code == 301 || $response->redirect_code == 302)) {
        return scald_twitter_parse_id($response->redirect_url, $check);
      }
    }
  }
  else {
    $id = $string;
  }

  if ($id && $check) {
    // Last check to confirm this tweet really exists on twitter
    if (!scald_twitter_text($id)) {
      $id = FALSE;
    }
  }
  return $id;
}


/**
 * Resolve a twitter ID from a tweet URL
 * @param $tweet_url
 *   The fully qualified tweet url.
 *   Ex: https://twitter.com/banditos/status/1235346346
 * @return id
 *   FALSE if the tweet was not resolved, otherwise its unique
 *   twitter ID
 */
function scald_twitter_resolve_url($tweet_url) {

  $c = curl_init();
  curl_setopt($c, CURLOPT_URL, $tweet_url);
  curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($c, CURLOPT_CONNECTTIMEOUT, 3);
  curl_setopt($c, CURLOPT_TIMEOUT, 5);
  $response = curl_exec($c);
  $responseInfo = curl_getinfo($c);
  curl_close($c);

  if (intval($responseInfo['http_code']) == 200) {
    //@TODO : make a better test to be sure we get a tweet
    $api_url_full = $tweet_url;
    $api_url_parts = explode('/', $api_url_full);
    $api_last_part = array_pop($api_url_parts);
    $id = explode('?', $api_last_part);
    $id = reset($id);
    return $id;
  }
  else {
    return FALSE;
  }
}
