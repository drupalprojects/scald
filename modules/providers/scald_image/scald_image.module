<?php

/**
 * @file
 * Scald Image is a Scald Atom Provider for images.
 */

/*******************************************************************************
 * SCALD HOOK IMPLEMENTATIONS
 */

/**
 * Implements hook_scald_atom_providers().
 */
function scald_image_scald_atom_providers() {
  return array(
    'image' => 'Image upload'
  );
  // This code will never be hit, but is necessary to mark the string
  // for translation on localize.d.o
  t('Image upload');
}

/**
 * Implements hook_scald_add_form().
 */
function scald_image_scald_add_form(&$form, &$form_state) {
  $form['file'] = array(
    '#type' => 'managed_file',
    '#title' => t('Image'),
    '#upload_location' => 'public://atoms/images/',
  );
}

/**
 * Implements hook_scald_add_form_fill().
 */
function scald_image_scald_add_form_fill(&$atom, $form, $form_state) {
  $file = file_load($form_state['values']['file']);
  $atom->title = $file->filename;
  $atom->base_id = $file->fid;
  $atom->scald_thumbnail[LANGUAGE_NONE][0] = (array)$file;
}

/**
 * Implements hook_scald_transcoders().
 */
function scald_image_scald_transcoders() {
  $transcoders = array();
  foreach (image_styles() as $name => $style) {
    $transcoders['style-' . $name] = array(
      'title' => t('@style (Image style)', array('@style' => $name)),
      'description' => t('Use the Image style @style to prepare the image', array('@style' => $name)),
      'formats' => array(
        'image' => 'passthrough'
      )
    );
  }
  return $transcoders;
}

/**
 * Implements hook_scald_fetch().
 */
function scald_image_scald_fetch($atom, $type) {
  if ($type == 'atom') {
    $file = file_load($atom->base_id);
    $atom->base_entity = $file;
    $atom->file_source = $file->uri;
    $atom->thumbnail_source = $file->uri;
  }
}

/**
 * Implements hook_scald_prerender().
 */
function scald_image_scald_prerender($atom, $context, $options, $mode) {
  // Find out which transcoder is in use. This seems unnecesarilly complex.
  $contexts = scald_contexts();
  $context_config = $contexts[$context]['type_format'][$atom->type];
  if (!preg_match('/^style-(.*)$/', $context_config['transcoder'], $match)) {
    return;
  }

  $preset = image_style_load($match[1]);

  if ($mode == 'transcoder') {
    if (!empty($atom->file_source)) {
      $path = str_replace('public://', 'public://styles/' . $preset['name'] . '/public/', $atom->file_source);
      $atom->file_transcoded = $path;
      $atom->rendered->file_transcoded_url = file_create_url($path);
    }
    if (!empty($atom->thumbnail_source)) {
      $path = str_replace('public://', 'public://styles/' . $preset['name'] . '/public/', $atom->thumbnail_source);
      $atom->thumbnail_transcoded = $path;
      $atom->rendered->thumbnail_transcoded_url = file_create_url($path);
    }
  }
  elseif ($mode == 'atom') {
    $atom->rendered->player = theme('image_style', array('path' => $atom->file_source, 'style_name' => $preset['name']));
  }
}

