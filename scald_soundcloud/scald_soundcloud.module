<?php
/**
 * @file
 *   Defines a SoundCloud provider for Scald.
 */

define('SOUNDCLOUD_ID_REGEXP',        '/^[a-zA-Z0-9]+$/');
define('SOUNDCLOUD_WEB_REGEXP',       '#^https?://([-\w]+\.)?soundcloud\.com/(.+$)#');
define('SOUNDCLOUD_WEB',              'http://soundcloud.com');
define('SCALD_APP_CLIENT_ID',         '4ddcde86e34b0c95e0d6222dd1edd38f');

/**
 * Implements hook_scald_atom_providers.
 * Tell Scald that we'll be providing some audio atoms.
 */
function scald_soundcloud_scald_atom_providers() {
  return array(
    'audio' => 'Audio hosted on SoundCloud'
  );
}

/**
 * Implements hook_scald_add_form.
 */
function scald_soundcloud_scald_add_form(&$form, &$form_state) {
  $form['identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('SoundCloud ID or URL'),
    '#element_validate' => array('scald_soundcloud_validate_id'),
    '#default_value' => '',
  );
}

/**
 * Implements hook_scald_add_form_fill.
 */
function scald_soundcloud_scald_add_form_fill(&$atom, $form, $form_state) {

  // Get the identifier
  $identifier = scald_soundcloud_parse_id($form_state['values']['identifier'], TRUE);

  // Get track info
  $infos = scald_soundcloud_audio($identifier);

  $atom->base_id = $identifier;
  $atom->title = $infos->title;

  // Prefill the author
  $atom->scald_authors[LANGUAGE_NONE][0] = array(
    'tid' => 0,
    'taxonomy_term' => (object)(array('name' => $infos->author))
  );
  
  // Prefill tags
  foreach($infos->tags as $index => $tag) {
    $atom->scald_tags[LANGUAGE_NONE][$index] = array(
      'tid' => $index,  // Beware, this is not a real tid, it's just an index
      'taxonomy_term' => (object)(array('name' => $tag))
    );
  }

  // Download a copy of the track thumbnail. This makes it possible
  // to do interesting manipulation with image styles presets.
  $thumb = drupal_http_request($infos->thumbnail['src']);
  $dir = 'public://soundcloud';
  if ($thumb->code == 200 && file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    $dest = $dir . '/' . $infos->id . '.jpg';
    $file = file_save_data($thumb->data, $dest);
  }

  // Set the file status to temporary
  $query = db_update('file_managed')
    ->condition('fid', $file->fid)
    ->fields(array('status' => 0))
    ->execute();

  $atom->scald_thumbnail[LANGUAGE_NONE][0] = (array)$file;
}

/**
 * Implements hook_scald_fetch.
 */
function scald_soundcloud_scald_fetch($atom, $type) {
  $file = 'public://soundcloud/'. $atom->base_id .'.jpg';
  if (file_exists($file)) {
    $atom->file_source = $atom->thumbnail_source = $file;
  }
}

/**
 * Implements hook_scald_prerender.
 */
function scald_soundcloud_scald_prerender($atom, $context, $options, $mode) {
  if ($mode == 'atom') {
    if ($context != 'sdl_library_item') {
      $atom->rendered->player = theme('scald_soundcloud_player',
        array('vars' =>
          array(
            'track_id' => $atom->base_id,
          )
        )
      );
    }
  }
}

/**
 * Implements hook_theme.
 */
function scald_soundcloud_theme() {
  return array(
    'scald_soundcloud_player' => array(
      'variables' => array('vars' => NULL),
      'template' => 'scald_soundcloud_player'
    ),
  );
}


/**
 * Creates an atom based on a SoundCloud audio id or an object
 * containing the audio informations..
 * @param $audio
 *   Unique identifier of the audio track on SoundCloud, or object
 *   returned by scald_soundcloud_audio
 * @return integer
 *   Unique identifier of the new atom
 */
function scald_soundcloud_register($audio) {
  global $user;
  // Fetch the needed informations from Vimeo
  if (is_object($audio)) {
    $infos = $audio;
  }
  else {
    $infos = scald_soundcloud_audio($audio);
  }

  // Check if the track has already been imported to prevent duplicate
  $old = scald_soundcloud_already_imported($infos->id);
  if ($old) {
    return FALSE;
  }

  // Download a copy of the audio thumbnail. This makes it possible
  // to do interesting manipulation with image styles presets.
  $thumb = drupal_http_request($infos->thumbnail['src']);
  $dir = 'public://soundcloud';
  if ($thumb->code == 200 && file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    $dest = $dir . '/' . $infos->id . '.jpg';
    $file = file_save_data($thumb->data, $dest);
  }

  // Create an atom
  $atom = new stdClass();
  $atom->type       = 'audio';
  $atom->provider   = 'scald_soundcloud';
  $atom->base_id    = $infos->id;
  $atom->publisher  = $user->uid;
  $atom->title      = $infos->title;

  // And save it
  $atom_sid = scald_atom_save($atom);
  // Finally, return this id
  return $atom_sid;
}

/**
 * Get all necessary on an given audio track using SoundCloud API
 * @param $id
 *   Unique identifier of the audio track on SoundCloud
 * @return object
 *   Object containing all necessary info.
 */
function scald_soundcloud_audio($id) {

  // create a client object with your app credentials
  require_once drupal_get_path('module', 'scald_soundcloud') . '/php-soundcloud/Services/Soundcloud.php';
  $client = new Services_Soundcloud(SCALD_APP_CLIENT_ID, NULL);

  try {
    $track = json_decode($client->get('tracks/' . $id));
  }
  catch(Exception $e) {
    watchdog('scald_soundcloud', $e->getMessage());
    return FALSE;
  }

  $info = new stdClass();
  // ID
  $info->id = $id;
  // Title
  $info->title = $track->title;
  // Author
  $info->author = $track->user->username;
  // Thumbnail
  if($track->artwork_url) {
    // Artwork is always 100x100
    $info->thumbnail = array(
      'src'    => $track->artwork_url,
      'width'  => 100,
      'height' => 100,
    );
  }
  
  // Tags
  $info->tags = explode(" ", $track->tag_list);
  // License
  $info->license = 'SC';
  return $info;
}

/**
 * Checks if an audio has already been imported, based on its audio id.
 * @param $id
 *   The audio identifier
 * @return mixed
 *   FALSE if the audio was never imported, the scald identifier of
 *   the audio otherwise.
 */
function scald_soundcloud_already_imported($id) {
  $query = array('provider' => 'scald_soundcloud', 'base_id' => $id);
  return scald_search($query, FALSE, TRUE);
}

/**
 * Form element validation handler for SoundCloud identifier
 *
 */
function scald_soundcloud_validate_id($element, &$form_state) {
  $id = scald_soundcloud_parse_id($form_state['values']['identifier'], TRUE);
  if(!$id) {
    form_error($element, t('Invalid SoundCloud ID or URL.'));
  }
  else if(scald_soundcloud_already_imported($id)) {
    form_error($element, t('SoundCloud track already imported.'));
  }
}

/**
 * Parse an Audio ID and check validity
 *
 */
function scald_soundcloud_parse_id($string, $check) {
  $id = FALSE;
  $string = trim($string);
  
  if (!preg_match(SOUNDCLOUD_ID_REGEXP, $string)) {
    // The string ID is not easy to parse, let's try to analyze it
    if (preg_match(SOUNDCLOUD_WEB_REGEXP, $string, $m)) {
      // This string is a full SoundCloud URL
      $id = scald_soundcloud_resolve_url($string);
    }
    else if(preg_match("/^http/", $string)) {
      // This string is a URL, most likely a shortened one. (http://dai.ly, http://bit.ly, etc...)
      $response = drupal_http_request($string);
      if($response->code == 200 && isset($response->redirect_code) && ($response->redirect_code == 301 || $response->redirect_code == 302)) {
        return scald_soundcloud_parse_id($response->redirect_url, $check);
      }
    }
  }
  else {
    $id = $string;
  }
  
  if($id && $check) {
    // Last check to confirm this track really exists on soundcloud
    if(!scald_soundcloud_audio($id)) {
      $id = FALSE;
    }
  }
  return $id;
}


/**
 * Resolve a SoundCloud ID from a track URL
 * @param $track_url
 *   The fully qualified track url.
 *   Ex: http://soundcloud.com/banditos/banditos-live-montreal-2012
 * @return id
 *   FALSE if the track was not resolved, otherwise its unique
 *   SoundCloud ID
 */
function scald_soundcloud_resolve_url($track_url) {
  require_once drupal_get_path('module', 'scald_soundcloud') . '/php-soundcloud/Services/Soundcloud.php';
  $client = new Services_Soundcloud(SCALD_APP_CLIENT_ID, NULL);
  try {
    $resolve = json_decode($client->get('resolve', array('url' => $track_url)));
  }
  catch(Exception $e) {
    watchdog('scald_soundcloud', $e->getMessage());
    return FALSE;
  }
  
  $api_url_full = $resolve->location;
  $api_url_parts = explode('/', $api_url_full);
  $api_last_part = array_pop($api_url_parts);
  $id = explode('?', $api_last_part);
  $id = reset($id);
  return $id;
}
