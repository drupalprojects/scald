<?php
/**
 * @file
 * Tests for scald.module.
 */

/**
 * Defines a base class for testing the Scald module.
 */
class ScaldWebTestCase extends DrupalWebTestCase {
  function setUp() {
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }
    $modules[] = 'scald';
    parent::setUp($modules);

    // Create Article node type.
    if ($this->profile != 'standard') {
      $this->drupalCreateContentType(array('type' => 'article', 'name' => 'Article'));
    }
  }

  /**
   * Create a new atom.
   */
  protected function createAtom($type = 'image') {
    module_enable(array('scald_image'));

    $files = $this->drupalGetTestFiles('image');
    $image = reset($files);

    $edit = array(
      'files[file]' => drupal_realpath($image->uri),
    );
    $this->drupalPost('atom/add/image', $edit, t('Continue'));
    $this->assertFieldByName('atom0[title]', $image->filename);

    // Change atom title.
    $title = 'Image ' . $this->randomName(20);
    $edit = array(
      'atom0[title]' => $title,
    );
    $this->drupalPost(NULL, $edit, t('Finish'));

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'scald_atom');
    $query->propertyCondition('title', $title);
    $result = $query->execute();
    $this->assertEqual(count($result['scald_atom']), 1, 'Image atom has been created.');

    $atom = reset($result['scald_atom']);
    return scald_fetch($atom->sid, TRUE);
  }

}

/**
 * Test the Scald base functionality.
 */
class ScaldBaseTestCase extends ScaldWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Scald base',
      'description' => 'Test the Scald base functionality.',
      'group' => 'Scald',
    );
  }

  function testScaldBaseAtomType() {
    module_enable(array('scald_audio'));

    $web_user = $this->drupalCreateUser(array('create article content', 'create page content', 'view any atom', 'fetch any atom'));
    $this->drupalLogin($web_user);

    $default = scald_atom_defaults('audio');
    $this->assertEqual($default->thumbnail_source, 'public://atoms/audio.png', 'Default thumbnail for audios set correctly.');
    $this->assertTrue(file_exists($default->thumbnail_source), 'Default thumbnail for audios exists.');
  }

  /**
   * Test Scald admin.
   */
  function testScaldAdmin() {
    $web_user = $this->drupalCreateUser(array(
    ));
    $this->drupalLogin($web_user);
    $this->drupalGet('admin/structure/scald');
    $this->assertResponse(403, 'Normal user cannot administer Scald');
    $this->drupalLogout();

    $admin_user = $this->drupalCreateUser(array(
      'administer scald',
    ));
    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/structure/scald');
    $this->assertResponse(200, 'Admin user can administer Scald');
  }

  /**
   * Test Scald context.
   */
  function testScaldContext() {
    module_enable(array('scald_image'));

    // Prefix to avoid invalid names.
    $title = 'context' . $this->randomName(10);
    $name = strtolower($title);
    $description = $this->randomName(20);

    $web_user = $this->drupalCreateUser(array(
      'administer scald',
      'view any atom',
      'create atom of any type',
    ));
    $this->drupalLogin($web_user);

    $this->drupalGet('admin/structure/scald');
    $this->clickLink('Add context');
    $edit = array(
      'title' => $title,
      // There is no JavaScript in the SimpleBrowser, thus machine name must be
      // filled manually.
      'name' => $name,
      'description' => $description,
    );
    $this->drupalPost(NULL, $edit, t('Add context'));

    $this->assertText($title, 'Context created.');
    $this->assertText($description, 'Context description is correct.');
    $this->assertLinkByHref('admin/structure/scald/context/edit/' . $name, 0, 'New context can be edited.');

    $this->clickLink('contexts');
    $edit = array(
      'full_trans' => 'style-large',
      $name . '_trans' => 'style-thumbnail',
      $name . '_playe' => 'image_figure',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertField('full_trans', 'style-large', 'Context transcoder updated.');
    $this->assertField($name . '_playe', 'image_figure', 'Context player updated.');

    // Player settings.
    $this->clickLink('settings');
    $class = 'class-' . $this->randomName(5);
    $caption = '//[atom:title]//';
    $edit = array(
      'classes' => $class,
      'caption' => $caption,
    );
    $this->drupalPost(NULL, $edit, t('Update'));

    // Verify new context settings. There is no easy way to verify a context
    // other than "full".
    $atom = $this->createAtom();
    $content = scald_render($atom, $name);
    $this->assertIdentical(1, preg_match('/class="[^"]*' . $class . '[^"]*"/', $content), 'Player class is correct.');
    $this->assertNotIdentical(FALSE, strpos($content, '<figcaption>//' . $atom->title . '//</figcaption>'), 'Player caption is correct.');
    $this->drupalGet('atom/' . $atom->sid);
    $this->assertRaw(image_style_url('large', $atom->base_entity->uri), 'Transcoder is correct.');
  }
}

/**
 * Test the Scald atom entities.
 */
class ScaldAtomEntityTestCase extends ScaldWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Scald atom entities',
      'description' => 'Test the Scald atom entities.',
      'group' => 'Scald',
    );
  }

  function setUp() {
    parent::setUp('scald_image');
    $this->web_user = $this->drupalCreateUser(array(
      'create atom of image type',
      'view any atom',
      'fetch any atom',
    ));
    $this->drupalLogin($this->web_user);
  }

  /**
   * Create four nodes and ensure they're loaded correctly.
   */
  function testScaldAtomCRUD() {
    $atom = $this->createAtom();
    $this->assertTrue($atom->fetched, 'Image atom has been loaded.');
  }

  /**
   * Permission tests.
   */
  function testScaldAtomPermissions() {
    $atom = $this->createAtom();
    $atom2 = $this->createAtom();

    // Switch user so that we can test directly with scald_render() with the
    // correct permission.
    global $user;
    $user = user_load($this->web_user->uid);

    // Try to view the atom.
    $this->drupalGet('atom/' . $atom->sid);
    $this->assertTitle($atom->title . ' | Drupal', 'Image atom can be accessed.');

    // Revoke the atom.
    $this->drupalGet('atom/' . $atom2->sid);
    $this->assertResponse(200, 'Atom is available.');
    $this->assertTitle($atom2->title . ' | Drupal', 'Image atom can be accessed.');
    $actions = scald_actions();
    $atom2->actions -= $actions['view']['bitmask'];
    scald_atom_save($atom2);

    $this->drupalGet('atom/' . $atom2->sid);
    $this->assertResponse(403);
    $atom2->actions -= $actions['fetch']['bitmask'];
    scald_atom_save($atom2);

    $this->drupalGet('atom/' . $atom2->sid);
    $this->assertResponse(404);

    // Now for embedded atoms. Use the easy way.
    $content = scald_render($atom2, 'full');
    $this->assertNotIdentical(FALSE, strpos($content, t('You do not have access to view this Atom.')), 'Atom can no longer be viewed.');

    // User without permission.
    $web_user = $this->drupalCreateUser(array('fetch any atom'));
    $this->drupalLogin($web_user);
    $this->drupalGet('atom/' . $atom->sid);
    $this->assertResponse(403);
    $this->drupalLogout();
    $this->drupalGet('atom/' . $atom->sid);
    $this->assertResponse(404);
  }
}

